import discord
from discord.ext import commands
from discord import app_commands
from utils.config import DEFAULT_BALANCE, ERRORS, CURRENCY, SERVICE_LEVELS
from utils.permissions import has_command_permission

class Economy(commands.Cog):
    """Economy system implementation"""

    def __init__(self, bot):
        self.bot = bot
        self.accounts = {}  # Store user balances in memory

    def get_balance(self, user_id: int) -> int:
        """Get user balance, initialize if doesn't exist"""
        if user_id not in self.accounts:
            self.accounts[user_id] = DEFAULT_BALANCE
        return self.accounts[user_id]

    def get_user_level(self, balance: int) -> dict:
        """Get user's service level based on balance"""
        user_level = None
        for level in reversed(SERVICE_LEVELS['levels']):
            if balance >= level['required_balance']:
                user_level = level
                break
        return user_level

    def format_amount(self, amount: int) -> str:
        """Format amount with currency"""
        return CURRENCY['FORMAT'].format(
            amount=amount,
            currency=CURRENCY['NAME']
        )

    @app_commands.command(
        name='balance',
        description='–ü–æ–∫–∞–∑–∞—Ç—å –±–∞–ª–∞–Ω—Å –≤–∞—à–µ–≥–æ —Å—á–µ—Ç–∞'
    )
    @has_command_permission('balance')
    async def balance(self, interaction: discord.Interaction):
        """Show user balance command"""
        balance = self.get_balance(interaction.user.id)
        user_level = self.get_user_level(balance)

        embed = discord.Embed(
            title="–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å—á–µ—Ç–µ",
            color=discord.Color(user_level['color'] if user_level else SERVICE_LEVELS['default_color'])
        )

        # Basic info
        embed.add_field(name="–í–ª–∞–¥–µ–ª–µ—Ü", value=interaction.user.name, inline=False)
        embed.add_field(
            name="–ë–∞–ª–∞–Ω—Å",
            value=f"{CURRENCY['SYMBOL']} {self.format_amount(balance)}",
            inline=False
        )

        # Level info if exists
        if user_level:
            embed.add_field(
                name="–£—Ä–æ–≤–µ–Ω—å –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏—è",
                value=f"{user_level['emoji']} {user_level['name']}",
                inline=False
            )

        await interaction.response.send_message(embed=embed)

    @app_commands.command(
        name='send',
        description='–ü–µ—Ä–µ–≤–µ—Å—Ç–∏ –º–æ–Ω–µ—Ç—ã –¥—Ä—É–≥–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é'
    )
    @app_commands.describe(
        user='–ü–æ–ª—É—á–∞—Ç–µ–ª—å –ø–µ—Ä–µ–≤–æ–¥–∞',
        amount='–°—É–º–º–∞ –ø–µ—Ä–µ–≤–æ–¥–∞'
    )
    @has_command_permission('send')
    async def transfer(
        self,
        interaction: discord.Interaction,
        user: discord.Member,
        amount: int
    ):
        """Transfer money to another user"""
        if amount <= 0:
            await interaction.response.send_message(
                ERRORS['INVALID_AMOUNT'],
                ephemeral=True
            )
            return

        if user.id == interaction.user.id:
            await interaction.response.send_message(
                '‚ùå –ù–µ–ª—å–∑—è –ø–µ—Ä–µ–≤–æ–¥–∏—Ç—å –¥–µ–Ω—å–≥–∏ —Å–∞–º–æ–º—É —Å–µ–±–µ!',
                ephemeral=True
            )
            return

        sender_balance = self.get_balance(interaction.user.id)
        if sender_balance < amount:
            await interaction.response.send_message(
                ERRORS['INSUFFICIENT_FUNDS'],
                ephemeral=True
            )
            return

        # Perform transfer
        self.accounts[interaction.user.id] -= amount
        self.get_balance(user.id)  # Ensure recipient account exists
        self.accounts[user.id] += amount

        embed = discord.Embed(title="–ü–µ—Ä–µ–≤–æ–¥ –≤—ã–ø–æ–ª–Ω–µ–Ω", color=discord.Color.green())
        embed.add_field(name="–û—Ç", value=interaction.user.name, inline=True)
        embed.add_field(name="–ö–æ–º—É", value=user.name, inline=True)
        embed.add_field(
            name="–°—É–º–º–∞",
            value=f"{CURRENCY['SYMBOL']} {self.format_amount(amount)}",
            inline=True
        )
        embed.add_field(
            name="–û—Å—Ç–∞—Ç–æ–∫",
            value=f"{CURRENCY['SYMBOL']} {self.format_amount(self.accounts[interaction.user.id])}",
            inline=False
        )

        await interaction.response.send_message(embed=embed)

    @app_commands.command(
        name='top',
        description='–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –±–æ–≥–∞—Ç–µ–π—à–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π'
    )
    @has_command_permission('top')
    async def top(self, interaction: discord.Interaction):
        """Show top richest users"""
        if not self.accounts:
            embed = discord.Embed(
                title="–¢–æ–ø —Å—á–µ—Ç–æ–≤",
                description="–°–ø–∏—Å–æ–∫ –ø—É—Å—Ç. –ü–æ–∫–∞ –Ω–µ—Ç –Ω–∏ –æ–¥–Ω–æ–≥–æ —Å—á–µ—Ç–∞!",
                color=discord.Color.gold()
            )
            await interaction.response.send_message(embed=embed)
            return

        sorted_accounts = sorted(
            self.accounts.items(),
            key=lambda x: x[1],
            reverse=True
        )
        embed = discord.Embed(title="–¢–æ–ø —Å—á–µ—Ç–æ–≤", color=discord.Color.gold())
        added_count = 0

        for i, (user_id, balance) in enumerate(sorted_accounts, 1):
            user = self.bot.get_user(user_id)
            if user:
                embed.add_field(
                    name=f"#{i} {user.name}",
                    value=f"{CURRENCY['SYMBOL']} {self.format_amount(balance)}",
                    inline=False
                )
                added_count += 1
            if added_count >= 10:  # Show only top 10
                break

        if added_count == 0:
            embed.description = "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è—Ö"
        else:
            embed.set_footer(text=f"–í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ —Å–ø–∏—Å–∫–µ: {len(self.accounts)}")

        await interaction.response.send_message(embed=embed)

    @app_commands.command(
        name='level',
        description='–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± —É—Ä–æ–≤–Ω—è—Ö –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏—è'
    )
    @app_commands.describe(
        level_id='ID —É—Ä–æ–≤–Ω—è –¥–ª—è –ø–æ–¥—Ä–æ–±–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏'
    )
    @has_command_permission('level')
    async def level(self, interaction: discord.Interaction, level_id: int = None):
        """Show service level information"""
        if level_id is not None:
            # Show specific level info
            level = next((l for l in SERVICE_LEVELS['levels'] if l['id'] == level_id), None)
            if not level:
                await interaction.response.send_message(
                    ERRORS['LEVEL_NOT_FOUND'],
                    ephemeral=True
                )
                return

            embed = discord.Embed(
                title=f"–£—Ä–æ–≤–µ–Ω—å {level['emoji']} {level['name']}",
                color=discord.Color(level['color'])
            )
            embed.add_field(
                name="–¢—Ä–µ–±—É–µ–º—ã–π –±–∞–ª–∞–Ω—Å",
                value=self.format_amount(level['required_balance']),
                inline=False
            )
            embed.add_field(
                name="–ü—Ä–∏–≤–∏–ª–µ–≥–∏–∏",
                value="\n".join(f"‚Ä¢ {benefit}" for benefit in level['benefits']),
                inline=False
            )
        else:
            # Show all levels overview
            embed = discord.Embed(
                title="üìä –£—Ä–æ–≤–Ω–∏ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏—è",
                description="–°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —É—Ä–æ–≤–Ω–µ–π",
                color=discord.Color(SERVICE_LEVELS['default_color'])
            )

            current_balance = self.get_balance(interaction.user.id)
            current_level = self.get_user_level(current_balance)

            for level in SERVICE_LEVELS['levels']:
                status = ""
                if current_level and level['id'] == current_level['id']:
                    status = "‚úÖ –¢–µ–∫—É—â–∏–π —É—Ä–æ–≤–µ–Ω—å"
                elif current_balance >= level['required_balance']:
                    status = "‚úì –î–æ—Å—Ç—É–ø–µ–Ω"
                else:
                    remaining = level['required_balance'] - current_balance
                    status = f"–¢—Ä–µ–±—É–µ—Ç—Å—è –µ—â–µ {self.format_amount(remaining)}"

                embed.add_field(
                    name=f"{level['emoji']} {level['name']} (ID: {level['id']})",
                    value=f"–¢—Ä–µ–±—É–µ–º—ã–π –±–∞–ª–∞–Ω—Å: {self.format_amount(level['required_balance'])}\n{status}",
                    inline=False
                )

            embed.set_footer(text="–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /level <ID> –¥–ª—è –ø–æ–¥—Ä–æ–±–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± —É—Ä–æ–≤–Ω–µ")

        await interaction.response.send_message(embed=embed)


async def setup(bot):
    await bot.add_cog(Economy(bot))