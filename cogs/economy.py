import discord
from discord.ext import commands
from discord import app_commands
from utils.config import DEFAULT_BALANCE, ERRORS, CURRENCY, DEFAULT_COLOR
from utils.database import get_db, UserProfile, Transaction, ServiceLevel
from sqlalchemy import desc
from sqlalchemy.exc import SQLAlchemyError
import json
import sys

class Economy(commands.Cog):
    """Economy system implementation"""

    def __init__(self, bot):
        self.bot = bot
        print("Economy cog initialized")

    def get_balance(self, user_id: int, guild_id: int) -> int:
        """Get user balance for specific server, initialize if doesn't exist"""
        if not guild_id:
            print(f"Warning: get_balance called without guild_id for user {user_id}", file=sys.stderr)
            return DEFAULT_BALANCE

        try:
            with get_db() as db:
                profile = db.query(UserProfile).filter(
                    UserProfile.user_id == user_id,
                    UserProfile.guild_id == guild_id
                ).first()

                if not profile:
                    profile = UserProfile(
                        user_id=user_id,
                        guild_id=guild_id,
                        balance=DEFAULT_BALANCE
                    )
                    db.add(profile)
                    db.commit()
                    print(f"Created new profile for user {user_id} in guild {guild_id}")

                return profile.balance
        except SQLAlchemyError as e:
            print(f"Database error in get_balance: {str(e)}", file=sys.stderr)
            return DEFAULT_BALANCE

    def get_user_level(self, balance: int, guild_id: int) -> dict:
        """Get user's service level based on balance"""
        if not guild_id:
            print(f"Warning: get_user_level called without guild_id", file=sys.stderr)
            return None

        try:
            with get_db() as db:
                levels = db.query(ServiceLevel).filter(
                    ServiceLevel.guild_id == guild_id,
                    ServiceLevel.required_balance <= balance
                ).order_by(desc(ServiceLevel.required_balance)).all()

                if levels:
                    level = levels[0]
                    return {
                        'id': level.id,
                        'name': level.name,
                        'emoji': level.emoji,
                        'required_balance': level.required_balance,
                        'color': level.color,
                        'benefits': json.loads(level.benefits)
                    }
                return None
        except SQLAlchemyError as e:
            print(f"Database error in get_user_level: {str(e)}", file=sys.stderr)
            return None
        except json.JSONDecodeError as e:
            print(f"JSON decode error in get_user_level: {str(e)}", file=sys.stderr)
            return None

    def format_amount(self, amount: int) -> str:
        """Format amount with currency"""
        return f"{amount:,} {CURRENCY['NAME']}"

    @app_commands.command(
        name='balance',
        description='–ü–æ–∫–∞–∑–∞—Ç—å –±–∞–ª–∞–Ω—Å —Å—á–µ—Ç–∞'
    )
    @app_commands.describe(
        user='–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)'
    )
    async def balance(self, interaction: discord.Interaction, user: discord.Member = None):
        """Show user balance command"""
        try:
            print(f"Balance command called by {interaction.user.name}")

            if not interaction.guild_id:
                await interaction.response.send_message(
                    "‚ùå –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–∞—Ö!",
                    ephemeral=True
                )
                return

            # If no user specified, show own balance
            target_user = user or interaction.user

            balance = self.get_balance(target_user.id, interaction.guild_id)
            user_level = self.get_user_level(balance, interaction.guild_id)

            embed = discord.Embed(
                title="–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å—á–µ—Ç–µ",
                color=discord.Color(user_level['color'] if user_level else DEFAULT_COLOR)
            )

            embed.add_field(name="–í–ª–∞–¥–µ–ª–µ—Ü", value=target_user.name, inline=False)
            embed.add_field(
                name="–ë–∞–ª–∞–Ω—Å",
                value=f"{CURRENCY['SYMBOL']} {self.format_amount(balance)}",
                inline=False
            )

            if user_level:
                embed.add_field(
                    name="–£—Ä–æ–≤–µ–Ω—å –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏—è",
                    value=f"{user_level['emoji']} {user_level['name']}",
                    inline=False
                )
                embed.add_field(
                    name="–ü—Ä–∏–≤–∏–ª–µ–≥–∏–∏",
                    value="\n".join(f"‚Ä¢ {benefit}" for benefit in user_level['benefits']),
                    inline=False
                )

                with get_db() as db:
                    try:
                        next_level = db.query(ServiceLevel).filter(
                            ServiceLevel.guild_id == interaction.guild_id,
                            ServiceLevel.required_balance > balance
                        ).order_by(ServiceLevel.required_balance).first()

                        if next_level:
                            remaining = next_level.required_balance - balance
                            embed.add_field(
                                name="–î–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ —É—Ä–æ–≤–Ω—è",
                                value=f"–ù–∞–∫–æ–ø–∏—Ç–µ –µ—â–µ {self.format_amount(remaining)} –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —É—Ä–æ–≤–Ω—è {next_level.emoji} {next_level.name}",
                                inline=False
                            )
                        else:
                            embed.add_field(
                                name="–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! üéâ",
                                value="–í—ã –¥–æ—Å—Ç–∏–≥–ª–∏ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ —É—Ä–æ–≤–Ω—è –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏—è!",
                                inline=False
                            )
                    except SQLAlchemyError as e:
                        print(f"Database error in balance command (next level): {str(e)}", file=sys.stderr)

            else:
                with get_db() as db:
                    try:
                        first_level = db.query(ServiceLevel).filter(
                            ServiceLevel.guild_id == interaction.guild_id
                        ).order_by(ServiceLevel.required_balance).first()

                        if first_level:
                            remaining = first_level.required_balance - balance
                            embed.add_field(
                                name="–£—Ä–æ–≤–µ–Ω—å –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏—è",
                                value="–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç —É—Ä–æ–≤–Ω—è –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏—è",
                                inline=False
                            )
                            embed.add_field(
                                name="–°–ª–µ–¥—É—é—â–∏–π —É—Ä–æ–≤–µ–Ω—å",
                                value=f"–ù–∞–∫–æ–ø–∏—Ç–µ –µ—â–µ {self.format_amount(remaining)} –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —É—Ä–æ–≤–Ω—è {first_level.emoji} {first_level.name}",
                                inline=False
                            )
                    except SQLAlchemyError as e:
                        print(f"Database error in balance command (first level): {str(e)}", file=sys.stderr)

            if user:
                embed.set_footer(text=f"–ó–∞–ø—Ä–æ—à–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º: {interaction.user.name}")

            await interaction.response.send_message(embed=embed)
        except Exception as e:
            print(f"Error in balance command: {e}", file=sys.stderr)
            await interaction.response.send_message(
                "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –±–∞–ª–∞–Ω—Å–µ",
                ephemeral=True
            )

    @app_commands.command(
        name='send',
        description='–ü–µ—Ä–µ–≤–µ—Å—Ç–∏ –º–æ–Ω–µ—Ç—ã –¥—Ä—É–≥–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é'
    )
    @app_commands.describe(
        user='–ü–æ–ª—É—á–∞—Ç–µ–ª—å –ø–µ—Ä–µ–≤–æ–¥–∞',
        amount='–°—É–º–º–∞ –ø–µ—Ä–µ–≤–æ–¥–∞'
    )
    async def transfer(self, interaction: discord.Interaction, user: discord.Member, amount: int):
        """Transfer money to another user"""
        print(f"Transfer command called by {interaction.user.name} to {user.name} amount {amount}")

        if amount <= 0:
            await interaction.response.send_message(
                ERRORS['INVALID_AMOUNT'],
                ephemeral=True
            )
            return

        if user.id == interaction.user.id:
            await interaction.response.send_message(
                '‚ùå –ù–µ–ª—å–∑—è –ø–µ—Ä–µ–≤–æ–¥–∏—Ç—å –¥–µ–Ω—å–≥–∏ —Å–∞–º–æ–º—É —Å–µ–±–µ!',
                ephemeral=True
            )
            return

        with get_db() as db:
            try:
                # Get or create sender profile
                sender_profile = db.query(UserProfile).filter(
                    UserProfile.user_id == interaction.user.id,
                    UserProfile.guild_id == interaction.guild_id
                ).first()

                if not sender_profile or sender_profile.balance < amount:
                    await interaction.response.send_message(
                        ERRORS['INSUFFICIENT_FUNDS'],
                        ephemeral=True
                    )
                    return

                # Get or create recipient profile
                recipient_profile = db.query(UserProfile).filter(
                    UserProfile.user_id == user.id,
                    UserProfile.guild_id == interaction.guild_id
                ).first()

                if not recipient_profile:
                    recipient_profile = UserProfile(
                        user_id=user.id,
                        guild_id=interaction.guild_id,
                        balance=DEFAULT_BALANCE
                    )
                    db.add(recipient_profile)

                # Perform transfer
                sender_profile.balance -= amount
                recipient_profile.balance += amount

                # Record transaction
                transaction = Transaction(
                    from_user_id=interaction.user.id,
                    to_user_id=user.id,
                    guild_id=interaction.guild_id,
                    amount=amount,
                    transaction_type='transfer'
                )
                db.add(transaction)
                db.commit()

                embed = discord.Embed(title="–ü–µ—Ä–µ–≤–æ–¥ –≤—ã–ø–æ–ª–Ω–µ–Ω", color=discord.Color.green())
                embed.add_field(name="–û—Ç", value=interaction.user.name, inline=True)
                embed.add_field(name="–ö–æ–º—É", value=user.name, inline=True)
                embed.add_field(
                    name="–°—É–º–º–∞",
                    value=f"{CURRENCY['SYMBOL']} {self.format_amount(amount)}",
                    inline=True
                )
                embed.add_field(
                    name="–û—Å—Ç–∞—Ç–æ–∫",
                    value=f"{CURRENCY['SYMBOL']} {self.format_amount(sender_profile.balance)}",
                    inline=False
                )

                await interaction.response.send_message(embed=embed)
            except SQLAlchemyError as e:
                print(f"Database error in transfer command: {str(e)}", file=sys.stderr)
                await interaction.response.send_message(
                    "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–≤–æ–¥–µ –¥–µ–Ω–µ–≥",
                    ephemeral=True
                )

    @app_commands.command(
        name='top',
        description='–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –±–æ–≥–∞—Ç–µ–π—à–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π'
    )
    async def top(self, interaction: discord.Interaction):
        """Show top richest users"""
        print(f"Top command called by {interaction.user.name}")

        with get_db() as db:
            try:
                sorted_accounts = db.query(UserProfile).filter(
                    UserProfile.guild_id == interaction.guild_id
                ).order_by(desc(UserProfile.balance)).all()

                if not sorted_accounts:
                    embed = discord.Embed(
                        title="–¢–æ–ø —Å—á–µ—Ç–æ–≤",
                        description="–°–ø–∏—Å–æ–∫ –ø—É—Å—Ç. –ü–æ–∫–∞ –Ω–µ—Ç –Ω–∏ –æ–¥–Ω–æ–≥–æ —Å—á–µ—Ç–∞!",
                        color=discord.Color.gold()
                    )
                    await interaction.response.send_message(embed=embed)
                    return

                embed = discord.Embed(title="–¢–æ–ø —Å—á–µ—Ç–æ–≤", color=discord.Color.gold())
                added_count = 0

                for i, profile in enumerate(sorted_accounts, 1):
                    user = self.bot.get_user(profile.user_id)
                    if user:
                        embed.add_field(
                            name=f"#{i} {user.name}",
                            value=f"{CURRENCY['SYMBOL']} {self.format_amount(profile.balance)}",
                            inline=False
                        )
                        added_count += 1
                    if added_count >= 10:  # Show only top 10
                        break

                if added_count == 0:
                    embed.description = "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è—Ö"
                else:
                    embed.set_footer(text=f"–í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ —Å–ø–∏—Å–∫–µ: {len(sorted_accounts)}")

                await interaction.response.send_message(embed=embed)
            except SQLAlchemyError as e:
                print(f"Database error in top command: {str(e)}", file=sys.stderr)
                await interaction.response.send_message(
                    "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ç–æ–ø–∞ —Å—á–µ—Ç–æ–≤",
                    ephemeral=True
                )

    @app_commands.command(
        name='level',
        description='–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± —É—Ä–æ–≤–Ω—è—Ö –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏—è'
    )
    @app_commands.describe(
        level_id='ID —É—Ä–æ–≤–Ω—è –¥–ª—è –ø–æ–¥—Ä–æ–±–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏'
    )
    async def level(self, interaction: discord.Interaction, level_id: int = None):
        """Show service level information"""
        print(f"Level command called by {interaction.user.name}, level_id={level_id}")

        with get_db() as db:
            try:
                if level_id is not None:
                    # Show specific level info
                    level = db.query(ServiceLevel).filter(
                        ServiceLevel.guild_id == interaction.guild_id,
                        ServiceLevel.id == level_id
                    ).first()
                    if not level:
                        await interaction.response.send_message(
                            ERRORS['LEVEL_NOT_FOUND'],
                            ephemeral=True
                        )
                        return

                    embed = discord.Embed(
                        title=f"–£—Ä–æ–≤–µ–Ω—å {level.emoji} {level.name}",
                        color=discord.Color(level.color)
                    )
                    embed.add_field(
                        name="–¢—Ä–µ–±—É–µ–º—ã–π –±–∞–ª–∞–Ω—Å",
                        value=self.format_amount(level.required_balance),
                        inline=False
                    )
                    embed.add_field(
                        name="–ü—Ä–∏–≤–∏–ª–µ–≥–∏–∏",
                        value="\n".join(f"‚Ä¢ {benefit}" for benefit in json.loads(level.benefits)),
                        inline=False
                    )
                else:
                    # Show all levels overview
                    embed = discord.Embed(
                        title="üìä –£—Ä–æ–≤–Ω–∏ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏—è",
                        description="–°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —É—Ä–æ–≤–Ω–µ–π",
                        color=discord.Color(DEFAULT_COLOR)
                    )

                    current_balance = self.get_balance(interaction.user.id, interaction.guild_id)
                    current_level = self.get_user_level(current_balance, interaction.guild_id)

                    levels = db.query(ServiceLevel).filter(
                        ServiceLevel.guild_id == interaction.guild_id
                    ).order_by(ServiceLevel.required_balance).all()

                    for level in levels:
                        status = ""
                        if current_level and level.id == current_level['id']:
                            status = "‚úÖ –¢–µ–∫—É—â–∏–π —É—Ä–æ–≤–µ–Ω—å"
                        elif current_balance >= level.required_balance:
                            status = "‚úì –î–æ—Å—Ç—É–ø–µ–Ω"
                        else:
                            remaining = level.required_balance - current_balance
                            status = f"–¢—Ä–µ–±—É–µ—Ç—Å—è –µ—â–µ {self.format_amount(remaining)}"

                        embed.add_field(
                            name=f"{level.emoji} {level.name} (ID: {level.id})",
                            value=f"–¢—Ä–µ–±—É–µ–º—ã–π –±–∞–ª–∞–Ω—Å: {self.format_amount(level.required_balance)}\n{status}",
                            inline=False
                        )

                    embed.set_footer(text="–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /level <ID> –¥–ª—è –ø–æ–¥—Ä–æ–±–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± —É—Ä–æ–≤–Ω–µ")

                await interaction.response.send_message(embed=embed)
            except SQLAlchemyError as e:
                print(f"Database error in level command: {str(e)}", file=sys.stderr)
                await interaction.response.send_message(
                    "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± —É—Ä–æ–≤–Ω—è—Ö",
                    ephemeral=True
                )
            except json.JSONDecodeError as e:
                print(f"JSON decode error in level command: {str(e)}", file=sys.stderr)
                await interaction.response.send_message(
                    "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –¥–∞–Ω–Ω—ã—Ö —É—Ä–æ–≤–Ω–µ–π",
                    ephemeral=True
                )


async def setup(bot):
    await bot.add_cog(Economy(bot))
    print("Economy cog setup complete")